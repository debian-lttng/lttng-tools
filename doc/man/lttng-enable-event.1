'\" t
.\"     Title: lttng-enable-event
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 4 April 2019
.\"    Manual: LTTng Manual
.\"    Source: LTTng 2.12.4
.\"  Language: English
.\"
.TH "LTTNG\-ENABLE\-EVENT" "1" "4 April 2019" "LTTng 2\&.12\&.4" "LTTng Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lttng-enable-event \- Create or enable LTTng event rules
.SH "SYNOPSIS"
.sp
Create or enable Linux kernel event rules:
.sp
.nf
\fBlttng\fR [\fIGENERAL OPTIONS\fR] \fBenable\-event\fR \fB--kernel\fR
      [\fB--probe\fR=\fISOURCE\fR | \fB--function\fR=\fISOURCE\fR | \fB--syscall\fR |
       \fB--userspace-probe\fR=\fISOURCE\fR]
      [\fB--filter\fR=\fIEXPR\fR] [\fB--session\fR=\fISESSION\fR]
      [\fB--channel\fR=\fICHANNEL\fR] \fIEVENT\fR[,\fIEVENT\fR]\&...
.fi
.sp
Create or enable an "all" Linux kernel event rule:
.sp
.nf
\fBlttng\fR [\fIGENERAL OPTIONS\fR] \fBenable\-event\fR \fB--kernel\fR \fB--all\fR [\fB--syscall\fR]
      [\fB--filter\fR=\fIEXPR\fR] [\fB--session\fR=\fISESSION\fR] [\fB--channel\fR=\fICHANNEL\fR]
.fi
.sp
Create or enable application/library event rules:
.sp
.nf
\fBlttng\fR [\fIGENERAL OPTIONS\fR] \fBenable\-event\fR
      (\fB--userspace\fR | \fB--jul\fR | \fB--log4j\fR | \fB--python\fR)
      [\fB--filter\fR=\fIEXPR\fR] [\fB--exclude\fR=\fIEVENT\fR[,\fIEVENT\fR]\&...]
      [\fB--loglevel\fR=\fILOGLEVEL\fR | \fB--loglevel-only\fR=\fILOGLEVEL\fR]
      [\fB--session\fR=\fISESSION\fR] [\fB--channel\fR=\fICHANNEL\fR] (\fB--all\fR | \fIEVENT\fR[,\fIEVENT\fR]\&...)
.fi
.SH "DESCRIPTION"
.sp
The \fBlttng enable-event\fR command can create a new event rule, or enable one or more existing and disabled ones\&.
.sp
An event rule created by \fBlttng enable-event\fR is a set of conditions that must be satisfied in order for an actual event to be emitted by an LTTng tracer when the execution of an application or a library or the Linux kernel reaches an event source (tracepoint, system call, dynamic probe)\&. Event sources can be listed with the \fBlttng-list\fR(1) command\&.
.sp
The \fBlttng-disable-event\fR(1) command can be used to disable existing event rules\&.
.sp
Event rules are always assigned to a channel when they are created\&. If the \fB--channel\fR option is omitted, a default channel named \fBchannel0\fR is used (and created automatically if it does not exist for the specified domain in the selected tracing session)\&.
.sp
If the \fB--session\fR option is omitted, the chosen channel is picked from the current tracing session\&.
.sp
Events can be enabled while tracing is active (use \fBlttng-start\fR(1) to make a tracing session active)\&.
.SS "Event source types"
.sp
Five types of event sources are available in the Linux kernel tracing domain (\fB--kernel\fR option):
.PP
Tracepoint (\fB--tracepoint\fR option; default)
.RS 4
A Linux kernel tracepoint, that is, a static instrumentation point placed in the kernel source code\&. Standard tracepoints are designed and placed in the source code by developers and record useful payload fields\&.
.RE
.PP
Dynamic kernel probe (\fB--probe\fR option)
.RS 4
A Linux kernel kprobe, that is, an instrumentation point placed dynamically in the compiled kernel code\&. Dynamic probe events do not record any payload field\&.
.RE
.PP
Dynamic user space probe (\fB--userspace-probe\fR option)
.RS 4
A Linux kernel uprobe, that is, an instrumentation point placed dynamically in the compiled user space application/library through the kernel\&. Dynamic user space probe events do not record any payload field\&.
.sp
See the
\fIDynamic user space probes\fR
section for more information\&.
.RE
.PP
Function probe (\fB--function\fR option)
.RS 4
A Linux kernel kretprobe, that is, two instrumentation points placed dynamically where a function is entered and where it returns in the compiled kernel code\&. Function probe events do not record any payload field\&.
.RE
.PP
System call (\fB--syscall\fR option)
.RS 4
A Linux kernel system call\&. Two instrumentation points are statically placed where a system call function is entered and where it returns in the compiled kernel code\&. System call event sources record useful payload fields\&.
.RE
.sp
The application tracing domains (\fB--userspace\fR, \fB--jul\fR, \fB--log4j\fR, or \fB--python\fR options) only support tracepoints\&. In the cases of the JUL, Apache log4j, and Python domains, the event names correspond to \fIlogger\fR names\&.
.SS "Understanding event rule conditions"
.sp
When creating an event rule with \fBlttng enable-event\fR, conditions are specified using options\&. The logical conjunction (logical AND) of all those conditions must be true when an event source is reached by an application or by the Linux kernel in order for an actual event to be emitted by an LTTng tracer\&.
.sp
Any condition that is not explicitly specified on creation is considered a \fIdon\(cqt care\fR\&.
.sp
For example, consider the following commands:
.sp
.if n \{\
.RS 4
.\}
.nf
$ lttng enable\-event \-\-userspace hello:world
$ lttng enable\-event \-\-userspace hello:world \-\-loglevel=TRACE_INFO
.fi
.if n \{\
.RE
.\}
.sp
Here, two event rules are created\&. The first one has a single condition: the tracepoint name must match \fBhello:world\fR\&. The second one has two conditions:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The tracepoint name must match
\fBhello:world\fR,
\fIand\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The tracepoint\(cqs defined log level must be at least as severe as the
\fBTRACE_INFO\fR
level\&.
.RE
.sp
In this case, the second event rule is pointless because the first one is more general: it does not care about the tracepoint\(cqs log level\&. If an event source matching both event rules is reached by the application\(cqs execution, only one event is emitted\&.
.sp
The available conditions for the Linux kernel domain are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Tracepoint/system call name (\fIEVENT\fR
argument with
\fB--tracepoint\fR
or
\fB--syscall\fR
options) or dynamic probe/function name/address (\fB--probe\fR,
\fB--userspace-probe\fR, and
\fB--function\fR
option\(cqs argument) which must match event source\(cqs equivalent\&.
.sp
You can use
\fB*\fR
characters at any place in the tracepoint or system call name as wildcards to match zero or more characters\&. To use a literal
\fB*\fR
character, use
\fB\e*\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Filter expression (\fB--filter\fR
option) executed against the dynamic values of event fields at execution time that must evaluate to true\&. See the
\fIFilter expression\fR
section below for more information\&.
.RE
.sp
The available conditions for the application domains are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Tracepoint name (\fIEVENT\fR
with
\fB--tracepoint\fR
option) which must match event source\(cqs equivalent\&.
.sp
You can use
\fB*\fR
characters at any place in the tracepoint name as wildcards to match zero or more characters\&. To use a literal
\fB*\fR
character, use
\fB\e*\fR\&. When you create an event rule with a tracepoint name containing a wildcard, you can exclude specific tracepoint names from the match with the
\fB--exclude\fR
option\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Filter expression (\fB--filter\fR
option) executed against the dynamic values of event fields at execution time that must evaluate to true\&. See the
\fIFilter expression\fR
section below for more information\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Event\(cqs log level that must be at least as severe as a given log level (\fB--loglevel\fR
option) or match exactly a given log level (\fB--loglevel-only\fR
option)\&.
.RE
.sp
When using \fBlttng enable-event\fR with a set of conditions that does not currently exist for the chosen tracing session, domain, and channel, a new event rule is created\&. Otherwise, the existing event rule is enabled if it is currently disabled (see \fBlttng-disable-event\fR(1))\&.
.sp
The \fB--all\fR option can be used alongside the \fB--tracepoint\fR or \fB--syscall\fR options\&. When this option is used, no \fIEVENT\fR argument must be specified\&. This option defines a single event rule matching \fIall\fR the possible events of a given tracing domain for the chosen channel and tracing session\&. It is the equivalent of an \fIEVENT\fR argument named \fB*\fR (wildcard)\&.
.SS "Filter expression"
.sp
A filter expression can be specified with the \fB--filter\fR option when creating a new event rule\&. If the filter expression evaluates to true when executed against the dynamic values of an event\(cqs fields when tracing, the filtering condition passes\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Make sure to \fBsingle\-quote\fR the filter expression when running the command from a shell, as filter expressions typically include characters having a special meaning for most shells\&.
.sp .5v
.RE
.sp
The filter expression syntax is similar to C language conditional expressions (expressions that can be evaluated by an \fBif\fR statement), albeit with a few differences:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
C integer and floating point number constants are supported, as well as literal strings between double quotes (\fB"\fR)\&. You can use
\fB*\fR
characters at any place in a literal string as wildcards to match zero or more characters\&. To use a literal
\fB*\fR
character, use
\fB\e*\fR\&.
.sp
Examples:
\fB32\fR,
\fB-0x17\fR,
\fB0755\fR,
\fB12.34\fR,
\fB"a \e"literal string\e""\fR,
\fB"src/*/*.h"\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The dynamic value of an event field is read by using its name as a C identifier\&.
.sp
The dot and square bracket notations are available, like in the C language, to access nested structure and array/sequence fields\&. Only a constant, positive integer number can be used within square brackets\&. If the index is out of bounds, the whole filter expression evaluates to false (the event is discarded)\&.
.sp
An enumeration field\(cqs value is an integer\&.
.sp
When the expression\(cqs field does not exist, the whole filter expression evaluates to false\&.
.sp
Examples:
\fBmy_field\fR,
\fBtarget_cpu\fR,
\fBseq[7]\fR,
\fBmsg.user[1].data[2][17]\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The dynamic value of a statically\-known context field is read by prefixing its name with
\fB$ctx.\fR\&. Statically\-known context fields are context fields added to channels without the
\fB$app.\fR
prefix using the
\fBlttng-add-context\fR(1)
command\&.
.sp
When the expression\(cqs statically\-known context field does not exist, the whole filter expression evaluates to false\&.
.sp
Examples:
\fB$ctx.prio\fR,
\fB$ctx.preemptible\fR,
\fB$ctx.perf:cpu:stalled-cycles-frontend\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The dynamic value of an application\-specific context field is read by prefixing its name with
\fB$app.\fR
(follows the format used to add such a context field with the
\fBlttng-add-context\fR(1)
command)\&.
.sp
When the expression\(cqs application\-specific context field does not exist, the whole filter expression evaluates to false\&.
.sp
Example:
\fB$app.server:cur_user\fR\&.
.RE
.sp
The following precedence table shows the operators which are supported in a filter expression\&. In this table, the highest precedence is 1\&. Parentheses are supported to bypass the default order\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.sp
Unlike the C language, the \fBlttng enable-event\fR filter expression syntax\(cqs bitwise AND and OR operators (\fB&\fR and \fB|\fR) take precedence over relational operators (\fB<\fR, \fB<=\fR, \fB>\fR, \fB>=\fR, \fB==\fR, and \fB!=\fR)\&. This means the filter expression \fB2 & 2 == 2\fR is true while the equivalent C expression is false\&.
.sp .5v
.RE
.TS
allbox tab(:);
ltB ltB ltB ltB.
T{
Precedence
T}:T{
Operator
T}:T{
Description
T}:T{
Associativity
T}
.T&
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt.
T{
.sp
1
T}:T{
.sp
\fB-\fR
T}:T{
.sp
Unary minus
T}:T{
.sp
Right\-to\-left
T}
T{
.sp
1
T}:T{
.sp
\fB+\fR
T}:T{
.sp
Unary plus
T}:T{
.sp
Right\-to\-left
T}
T{
.sp
1
T}:T{
.sp
\fB!\fR
T}:T{
.sp
Logical NOT
T}:T{
.sp
Right\-to\-left
T}
T{
.sp
1
T}:T{
.sp
\fB~\fR
T}:T{
.sp
Bitwise NOT
T}:T{
.sp
Right\-to\-left
T}
T{
.sp
2
T}:T{
.sp
\fB<<\fR
T}:T{
.sp
Bitwise left shift
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
2
T}:T{
.sp
\fB>>\fR
T}:T{
.sp
Bitwise right shift
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
3
T}:T{
.sp
\fB&\fR
T}:T{
.sp
Bitwise AND
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
4
T}:T{
.sp
\fB^\fR
T}:T{
.sp
Bitwise XOR
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
5
T}:T{
.sp
\fB|\fR
T}:T{
.sp
Bitwise OR
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
6
T}:T{
.sp
\fB<\fR
T}:T{
.sp
Less than
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
6
T}:T{
.sp
\fB<=\fR
T}:T{
.sp
Less than or equal to
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
6
T}:T{
.sp
\fB>\fR
T}:T{
.sp
Greater than
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
6
T}:T{
.sp
\fB>=\fR
T}:T{
.sp
Greater than or equal to
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
7
T}:T{
.sp
\fB==\fR
T}:T{
.sp
Equal to
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
7
T}:T{
.sp
\fB!=\fR
T}:T{
.sp
Not equal to
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
8
T}:T{
.sp
\fB&&\fR
T}:T{
.sp
Logical AND
T}:T{
.sp
Left\-to\-right
T}
T{
.sp
9
T}:T{
.sp
\fB||\fR
T}:T{
.sp
Logical OR
T}:T{
.sp
Left\-to\-right
T}
.TE
.sp 1
.sp
The arithmetic operators are NOT supported\&.
.sp
All integer constants and fields are first casted to signed 64\-bit integers\&. The representation of negative integers is two\(cqs complement\&. This means that, for example, the signed 8\-bit integer field 0xff (\-1) becomes 0xffffffffffffffff (still \-1) once casted\&.
.sp
Before a bitwise operator is applied, all its operands are casted to unsigned 64\-bit integers, and the result is casted back to a signed 64\-bit integer\&. For the bitwise NOT operator, it is the equivalent of this C expression:
.sp
.if n \{\
.RS 4
.\}
.nf
(int64_t) ~((uint64_t) val)
.fi
.if n \{\
.RE
.\}
.sp
For the binary bitwise operators, it is the equivalent of those C expressions:
.sp
.if n \{\
.RS 4
.\}
.nf
(int64_t) ((uint64_t) lhs >> (uint64_t) rhs)
(int64_t) ((uint64_t) lhs << (uint64_t) rhs)
(int64_t) ((uint64_t) lhs & (uint64_t) rhs)
(int64_t) ((uint64_t) lhs ^ (uint64_t) rhs)
(int64_t) ((uint64_t) lhs | (uint64_t) rhs)
.fi
.if n \{\
.RE
.\}
.sp
If the right\-hand side of a bitwise shift operator (\fB<<\fR and \fB>>\fR) is not in the [0,\ \&63] range, the whole filter expression evaluates to false\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Although it is possible to filter the process ID of an event when the \fBpid\fR context has been added to its channel using, for example, \fB$ctx.pid == 2832\fR, it is recommended to use the PID tracker instead, which is much more efficient (see \fBlttng-track\fR(1))\&.
.sp .5v
.RE
.sp
Filter expression examples:
.sp
.if n \{\
.RS 4
.\}
.nf
msg_id == 23 && size >= 2048
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ctx\&.procname == "lttng*" && (!flag || poel < 34)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$app\&.my_provider:my_context == 17\&.34e9 || some_enum >= 14
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ctx\&.cpu_id == 2 && filename != "*\&.log"
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
eax_reg & 0xff7 == 0x240 && x[4] >> 12 <= 0x1234
.fi
.if n \{\
.RE
.\}
.SS "Log levels"
.sp
Tracepoints and log statements in applications have an attached log level\&. Application event rules can contain a \fIlog level\fR condition\&.
.sp
With the \fB--loglevel\fR option, the event source\(cqs log level must be at least as severe as the option\(cqs argument\&. With the \fB--loglevel-only\fR option, the event source\(cqs log level must match the option\(cqs argument\&.
.sp
The available log levels are:
.PP
User space domain (\fB--userspace\fR option)
.RS 4
Shortcuts such as
\fBsystem\fR
are allowed\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_EMERG\fR
(0)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_ALERT\fR
(1)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_CRIT\fR
(2)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_ERR\fR
(3)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_WARNING\fR
(4)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_NOTICE\fR
(5)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_INFO\fR
(6)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG_SYSTEM\fR
(7)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG_PROGRAM\fR
(8)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG_PROCESS\fR
(9)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG_MODULE\fR
(10)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG_UNIT\fR
(11)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG_FUNCTION\fR
(12)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG_LINE\fR
(13)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBTRACE_DEBUG\fR
(14)
.RE
.RE
.PP
\fBjava.util.logging\fR domain (\fB--jul\fR option)
.RS 4
Shortcuts such as
\fBsevere\fR
are allowed\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_OFF\fR
(\fBINT32_MAX\fR)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_SEVERE\fR
(1000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_WARNING\fR
(900)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_INFO\fR
(800)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_CONFIG\fR
(700)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_FINE\fR
(500)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_FINER\fR
(400)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_FINEST\fR
(300)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBJUL_ALL\fR
(\fBINT32_MIN\fR)
.RE
.RE
.PP
Apache log4j domain (\fB--log4j\fR option)
.RS 4
Shortcuts such as
\fBsevere\fR
are allowed\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_OFF\fR
(\fBINT32_MAX\fR)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_FATAL\fR
(50000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_ERROR\fR
(40000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_WARN\fR
(30000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_INFO\fR
(20000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_DEBUG\fR
(10000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_TRACE\fR
(5000)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBLOG4J_ALL\fR
(\fBINT32_MIN\fR)
.RE
.RE
.PP
Python domain (\fB--python\fR option)
.RS 4
Shortcuts such as
\fBcritical\fR
are allowed\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBPYTHON_CRITICAL\fR
(50)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBPYTHON_ERROR\fR
(40)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBPYTHON_WARNING\fR
(30)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBPYTHON_INFO\fR
(20)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBPYTHON_DEBUG\fR
(10)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBPYTHON_NOTSET\fR
(0)
.RE
.RE
.SS "Dynamic user space probes"
.sp
With the \fB--userspace-probe\fR option, you can instrument function entries of any user space binary (application or library) using either an available symbol name or a SystemTap User\-level Statically Defined Tracing (USDT, a DTrace\-style marker) probe\(cqs provider and probe names\&. As of this version, only USDT probes that are NOT surrounded by a reference counter (semaphore) are supported\&.
.sp
The \fB--userspace-probe\fR option must be specified with the \fB--kernel\fR option because it uses Linux\(cqs uprobe feature to dynamically instrument a user space application or library\&.
.sp
As of this version, dynamic probe events do not record any payload field\&.
.SH "OPTIONS"
.sp
General options are described in \fBlttng\fR(1)\&.
.SS "Domain"
.sp
One of:
.PP
\fB-j\fR, \fB--jul\fR
.RS 4
Create or enable event rules in the
\fBjava.util.logging\fR
(JUL) domain\&.
.RE
.PP
\fB-k\fR, \fB--kernel\fR
.RS 4
Create or enable event rules in the Linux kernel domain\&.
.RE
.PP
\fB-l\fR, \fB--log4j\fR
.RS 4
Create or enable event rules in the Apache log4j domain\&.
.RE
.PP
\fB-p\fR, \fB--python\fR
.RS 4
Create or enable event rules in the Python domain\&.
.RE
.PP
\fB-u\fR, \fB--userspace\fR
.RS 4
Create or enable event rules in the user space domain\&.
.RE
.SS "Target"
.PP
\fB-c\fR \fICHANNEL\fR, \fB--channel\fR=\fICHANNEL\fR
.RS 4
Create or enable event rules in the channel named
\fICHANNEL\fR
instead of the default channel name
\fBchannel0\fR\&.
.RE
.PP
\fB-s\fR \fISESSION\fR, \fB--session\fR=\fISESSION\fR
.RS 4
Create or enable event rules in the tracing session named
\fISESSION\fR
instead of the current tracing session\&.
.RE
.SS "Event source type"
.sp
One of:
.PP
\fB--function\fR=\fISOURCE\fR
.RS 4
Dynamic kernel return probe (kretprobe)\&. Only available with the
\fB--kernel\fR
domain option\&.
\fISOURCE\fR
is one of:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Function address (\fB0x\fR
prefix supported)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Function symbol name
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Function symbol name and offset (\fISYMBOL\fR\fB+\fR\fIOFFSET\fR
format)
.RE
.RE
.PP
\fB--probe\fR=\fISOURCE\fR
.RS 4
Dynamic kernel probe (kprobe)\&. Only available with the
\fB--kernel\fR
domain option\&.
\fISOURCE\fR
is one of:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Address (\fB0x\fR
prefix supported)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Symbol name
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Symbol name and offset (\fISYMBOL\fR\fB+\fR\fIOFFSET\fR
format)
.RE
.RE
.PP
\fB--userspace-probe\fR=\fISOURCE\fR
.RS 4
Dynamic user space probe (uprobe)\&. Only available with the
\fB--kernel\fR
domain option\&. See the
\fIDynamic user space probes\fR
section\&.
.sp
\fISOURCE\fR
is one of:
.PP
[\fBelf:\fR]\fIPATH\fR\fB:\fR\fISYMBOL\fR
.RS 4
Dynamically instrument an available symbol within a user space application or library\&.
.PP
\fIPATH\fR
.RS 4
Application or library path\&.
.sp
This can be:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An absolute path\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A relative path\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An application\(cqs name as found in the directories listed in the
\fBPATH\fR
environment variable\&.
.RE
.RE
.PP
\fISYMBOL\fR
.RS 4
Symbol name of the function of which to instrument the entry\&.
.sp
This can be any defined code symbol listed by the
\fBnm\fR(1)
command (including with its
\fB--dynamic\fR
option which lists dynamic symbols)\&.
.RE
.sp
As of this version, not specifying
\fBelf:\fR
is equivalent to specifying it\&.
.sp
Examples:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB--userspace-probe=/usr/lib/libc.so.6:malloc\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB--userspace-probe=./myapp:createUser\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB--userspace-probe=httpd:ap_run_open_htaccess\fR
.RE
.RE
.PP
\fBsdt:\fR\fIPATH\fR\fB:\fR\fIPROVIDER\fR\fB:\fR\fINAME\fR
.RS 4
Dynamically instrument a USDT probe within a user space application or library\&.
.PP
\fIPATH\fR
.RS 4
Application or library path\&.
.sp
This can be:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An absolute path\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A relative path\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An application\(cqs name as found in the directories listed in the
\fBPATH\fR
environment variable\&.
.RE
.RE
.PP
\fIPROVIDER\fR\fB:\fR\fINAME\fR
.RS 4
USDT provider and probe names\&.
.sp
For example, with the following USDT probe:
.sp
.if n \{\
.RS 4
.\}
.nf
DTRACE_PROBE2("server", "accept_request",
              request_id, ip_addr);
.fi
.if n \{\
.RE
.\}
.sp
The provider/probe name pair is
\fBserver:accept_request\fR\&.
.RE
.sp
Example:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB--userspace-probe=sdt:./build/server:server:accept_request\fR
.RE
.RE
.RE
.PP
\fB--syscall\fR
.RS 4
Linux kernel system call\&. Only available with the
\fB--kernel\fR
domain option\&.
.RE
.PP
\fB--tracepoint\fR
.RS 4
Linux kernel or application tracepoint (default)\&.
.RE
.SS "Log level"
.sp
One of:
.PP
\fB--loglevel\fR=\fILOGLEVEL\fR
.RS 4
Add log level condition to the event rule: the event source\(cqs defined log level must be at least as severe as
\fILOGLEVEL\fR\&. See the
\fILog levels\fR
section above for the available log levels\&. Only available with application domains\&.
.RE
.PP
\fB--loglevel-only\fR=\fILOGLEVEL\fR
.RS 4
Add log level condition to the event rule: the event source\(cqs defined log level must match
\fILOGLEVEL\fR\&. See the
\fILog levels\fR
section above for the available log levels\&. Only available with application domains\&.
.RE
.SS "Filtering and exclusion"
.PP
\fB-x\fR \fIEVENT\fR[,\fIEVENT\fR]\&..., \fB--exclude\fR=\fIEVENT\fR[,\fIEVENT\fR]\&...
.RS 4
Exclude events named
\fIEVENT\fR
from the event rule\&. This option can be used when the command\(cqs
\fIEVENT\fR
argument contains at least one wildcard star (\fB*\fR) to exclude specific names\&.
\fIEVENT\fR
can also contain wildcard stars\&. To use a literal
\fB,\fR
character, use
\fB\e,\fR\&. Only available with the
\fB--userspace\fR
domain\&.
.RE
.PP
\fB-f\fR \fIEXPR\fR, \fB--filter\fR=\fIEXPR\fR
.RS 4
Add filter expression condition to the event rule\&. Expression
\fIEXPR\fR
must evaluate to true when executed against the dynamic values of event fields\&. See the
\fIFilter expression\fR
section above for more information\&.
.RE
.SS "Shortcuts"
.PP
\fB-a\fR, \fB--all\fR
.RS 4
Equivalent to an
\fIEVENT\fR
argument named
\fB*\fR
(wildcard) when also using the
\fB--tracepoint\fR
(default) or
\fB--syscall\fR
option\&.
.RE
.SS "Program information"
.PP
\fB-h\fR, \fB--help\fR
.RS 4
Show command help\&.
.sp
This option, like
\fBlttng-help\fR(1), attempts to launch
\fB/usr/bin/man\fR
to view the command\(cqs man page\&. The path to the man pager can be overridden by the
\fBLTTNG_MAN_BIN_PATH\fR
environment variable\&.
.RE
.PP
\fB--list-options\fR
.RS 4
List available command options\&.
.RE
.SH "ENVIRONMENT VARIABLES"
.PP
\fBLTTNG_ABORT_ON_ERROR\fR
.RS 4
Set to 1 to abort the process after the first error is encountered\&.
.RE
.PP
\fBLTTNG_HOME\fR
.RS 4
Overrides the
\fB$HOME\fR
environment variable\&. Useful when the user running the commands has a non\-writable home directory\&.
.RE
.PP
\fBLTTNG_MAN_BIN_PATH\fR
.RS 4
Absolute path to the man pager to use for viewing help information about LTTng commands (using
\fBlttng-help\fR(1)
or
\fBlttng COMMAND --help\fR)\&.
.RE
.PP
\fBLTTNG_SESSION_CONFIG_XSD_PATH\fR
.RS 4
Path in which the
\fBsession.xsd\fR
session configuration XML schema may be found\&.
.RE
.PP
\fBLTTNG_SESSIOND_PATH\fR
.RS 4
Full session daemon binary path\&.
.sp
The
\fB--sessiond-path\fR
option has precedence over this environment variable\&.
.RE
.sp
Note that the \fBlttng-create\fR(1) command can spawn an LTTng session daemon automatically if none is running\&. See \fBlttng-sessiond\fR(8) for the environment variables influencing the execution of the session daemon\&.
.SH "FILES"
.PP
\fB$LTTNG_HOME/.lttngrc\fR
.RS 4
User LTTng runtime configuration\&.
.sp
This is where the per\-user current tracing session is stored between executions of
\fBlttng\fR(1)\&. The current tracing session can be set with
\fBlttng-set-session\fR(1)\&. See
\fBlttng-create\fR(1)
for more information about tracing sessions\&.
.RE
.PP
\fB$LTTNG_HOME/lttng-traces\fR
.RS 4
Default output directory of LTTng traces\&. This can be overridden with the
\fB--output\fR
option of the
\fBlttng-create\fR(1)
command\&.
.RE
.PP
\fB$LTTNG_HOME/.lttng\fR
.RS 4
User LTTng runtime and configuration directory\&.
.RE
.PP
\fB$LTTNG_HOME/.lttng/sessions\fR
.RS 4
Default location of saved user tracing sessions (see
\fBlttng-save\fR(1)
and
\fBlttng-load\fR(1))\&.
.RE
.PP
\fB/usr/local/etc/lttng/sessions\fR
.RS 4
System\-wide location of saved tracing sessions (see
\fBlttng-save\fR(1)
and
\fBlttng-load\fR(1))\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
\fB$LTTNG_HOME\fR defaults to \fB$HOME\fR when not explicitly set\&.
.sp .5v
.RE
.SH "EXIT STATUS"
.PP
\fB0\fR
.RS 4
Success
.RE
.PP
\fB1\fR
.RS 4
Command error
.RE
.PP
\fB2\fR
.RS 4
Undefined command
.RE
.PP
\fB3\fR
.RS 4
Fatal error
.RE
.PP
\fB4\fR
.RS 4
Command warning (something went wrong during the command)
.RE
.SH "BUGS"
.sp
If you encounter any issue or usability problem, please report it on the LTTng bug tracker <https://bugs.lttng.org/projects/lttng-tools>\&.
.SH "RESOURCES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
LTTng project website <https://lttng.org>
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
LTTng documentation <https://lttng.org/docs>
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Git repositories <http://git.lttng.org>
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
GitHub organization <http://github.com/lttng>
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Continuous integration <http://ci.lttng.org/>
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Mailing list <http://lists.lttng.org>
for support and development:
\fBlttng-dev@lists.lttng.org\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
IRC channel <irc://irc.oftc.net/lttng>:
\fB#lttng\fR
on
\fBirc.oftc.net\fR
.RE
.SH "COPYRIGHTS"
.sp
This program is part of the LTTng\-tools project\&.
.sp
LTTng\-tools is distributed under the GNU General Public License version 2 <http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html>\&. See the \fBLICENSE\fR <https://github.com/lttng/lttng-tools/blob/master/LICENSE> file for details\&.
.SH "THANKS"
.sp
Special thanks to Michel Dagenais and the DORSAL laboratory <http://www.dorsal.polymtl.ca/> at \('Ecole Polytechnique de Montr\('eal for the LTTng journey\&.
.sp
Also thanks to the Ericsson teams working on tracing which helped us greatly with detailed bug reports and unusual test cases\&.
.SH "SEE ALSO"
.sp
\fBlttng-disable-event\fR(1), \fBlttng\fR(1)
